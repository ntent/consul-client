import org.apache.tools.ant.taskdefs.condition.Os


plugins {
    id 'de.undercouch.download' version '4.0.0'
}

def consulDownloadUrl
def consulFile
if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    consulFile = "consul.exe"
    consulDownloadUrl = "https://releases.hashicorp.com/consul/1.6.2/consul_1.6.2_windows_amd64.zip"
} else if (Os.isFamily(Os.FAMILY_MAC)) {
    consulFile = "consul"
    consulDownloadUrl = "https://releases.hashicorp.com/consul/1.6.2/consul_1.6.2_darwin_amd64.zip"
} else { // linux
    consulFile = "consul"
    consulDownloadUrl = "https://releases.hashicorp.com/consul/1.6.2/consul_1.6.2_linux_amd64.zip"
}
def consulExists = rootProject.layout.projectDirectory.file("bin/${consulFile}").asFile.exists()

apply plugin: 'scala'
apply plugin: 'maven-publish'

version = '1.0.0-SNAPSHOT'
group = 'com.ntent'
project.sourceCompatibility = '1.7'
project.targetCompatibility = '1.7'

repositories{
    maven { url "http://nexus.cb.ntent.com/nexus/content/groups/public/" }
    maven { url "https://mvnrepository.com/artifact/" }
}

if(rootProject.hasProperty("teamcity")) {
    version = "1.0.0." + teamcity["build.number"]
    publishing {
        repositories {
            maven {
                credentials {
                    username mavenUser
                    password mavenPassword
                }
                url "http://nexus.cb.ntent.com/nexus/content/repositories/releases/"
            }
        }
    }
} else {
    version = '1.0.0-SNAPSHOT'
    if(project.hasProperty('mavenUser')) {
    publishing {repositories {maven {
        credentials {
            username mavenUser
            password mavenPassword
        }
        url "http://nexus.cb.ntent.com/nexus/content/repositories/snapshots/"
    }}}}
}

dependencies {
    compile "com.typesafe:config:1.3.0"
    compile "org.scala-lang:scala-library:$scala_version"

    //compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'org.apache.httpcomponents:fluent-hc:4.2.6'
//    compile 'com.fasterxml.jackson.module:jackson-module-scala_2.10:2.6.3'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-scala_2.11', version: '2.8.3'

//    compile 'io.reactivex:rxscala_2.10:0.26.0'
    compile group: 'io.reactivex', name: 'rxscala_2.11', version: '0.26.3'

    compile 'org.slf4j:slf4j-simple:1.7.14'
//    compile 'com.typesafe.scala-logging:scala-logging-slf4j_2.10:2.1.2'
    // https://mvnrepository.com/artifact/com.typesafe.scala-logging/scala-logging-slf4j_2.11
    compile group: 'com.typesafe.scala-logging', name: 'scala-logging-slf4j_2.11', version: '2.1.2'

    // test
//   testCompile 'org.scalamock:scalamock-scalatest-support_2.10:3.2.2'
//   testCompile 'org.scalatest:scalatest_2.10:2.2.6'
    testCompile "org.scalamock:scalamock-scalatest-support_2.11:3.3.0"
    testCompile 'org.scalatest:scalatest_2.11:3.0.0'
    testCompile 'org.apache.commons:commons-io:1.3.2'
    testCompile "org.slf4j:slf4j-api:$slf4j_version"
    testCompile 'junit:junit-dep:4.11'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenPub(MavenPublication) {
            from components.java
            artifact sourceJar {classifier "sources"}
        }
    }
}


    /*
      Get consul for tests
     */
    task downloadConsul(type: Download) {
        onlyIf { !consulExists }
        src consulDownloadUrl
        dest new File(rootProject.buildDir, 'consul.zip')
    }
    task getConsul(type: Copy) {
        dependsOn downloadConsul
        onlyIf {
            // see if we don't already have it.
            def exists = consulExists
            if (exists)
                logger.info "${consulFile} already exists!"
            else
                logger.info "${consulFile} does not exist!"

            return !exists
        }
        from zipTree(new File(rootProject.buildDir,'consul.zip'))
        into rootProject.layout.projectDirectory.dir("bin")
    }

    project.tasks.test.dependsOn(project.tasks.getConsul)
